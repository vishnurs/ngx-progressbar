{
  "version": 3,
  "file": "ngx-progressbar-http.umd.min.js",
  "sources": [
    "ng://@ngx-progressbar/http/out/ng-progress-http.token.ts",
    "ng://@ngx-progressbar/http/out/ng-progress.interceptor.ts",
    "ng://@ngx-progressbar/http/out/ng-progress-http.module.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\n\nexport const CONFIG = new InjectionToken<NgProgressHttpConfig>('config');",
    "import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { finalize } from 'rxjs/operators/finalize';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\nimport { CONFIG } from './ng-progress-http.token';\nimport { NgProgress } from '@ngx-progressbar/core';\n\n@Injectable()\nexport class NgProgressInterceptor implements HttpInterceptor {\n\n  private _inProgressCount = 0;\n\n  constructor(\n    private _ngProgress: NgProgress,\n    @Optional() @Inject(CONFIG) private _config?: NgProgressHttpConfig\n  ) {\n  }\n\n  // Ignoring specific requests will be supported after this https://github.com/angular/angular/issues/18155\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Ignore silent api requests\n    if (this.checkUrl(req)) {\n      return next.handle(req);\n    }\n    this._inProgressCount++;\n    if (!this._ngProgress.ref('root').isStarted) {\n      this._ngProgress.start();\n    }\n    return next.handle(req).pipe(finalize(() => {\n      this._inProgressCount--;\n      if (this._inProgressCount === 0) {\n        this._ngProgress.complete();\n      }\n    }));\n  }\n\n  private checkUrl(req: HttpRequest<any>) {\n    const url = req.url.toLowerCase();\n    const found = this._config.silentApis.find((u) => url.startsWith(u));\n    return !!found;\n  }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\n\n@NgModule({\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n  ],\n})\nexport class NgProgressHttpModule {}\n"
  ],
  "names": [
    "CONFIG",
    "InjectionToken",
    "NgProgressInterceptor",
    "prototype",
    "intercept",
    "req",
    "next",
    "_this",
    "this",
    "checkUrl",
    "handle",
    "_inProgressCount",
    "_ngProgress",
    "ref",
    "isStarted",
    "start",
    "pipe",
    "finalize",
    "complete",
    "url",
    "toLowerCase",
    "_config",
    "silentApis",
    "find",
    "u",
    "startsWith",
    "type",
    "Injectable",
    "NgProgress",
    "undefined",
    "decorators",
    "Optional",
    "Inject",
    "args",
    "NgProgressHttpModule",
    "NgModule",
    "providers",
    "provide",
    "HTTP_INTERCEPTORS",
    "useClass",
    "multi"
  ],
  "mappings": "8iBAAA,IAGaA,EAAS,IAAIC,EAAAA,eAAqC,UCH/DC,GAoBEA,EAAFC,UAAAC,UAAE,SAAUC,EAAuBC,GAAjC,IAAFC,EAAAC,KAEI,OAAIA,KAAKC,SAASJ,GACTC,EAAKI,OAAOL,IAErBG,KAAKG,mBACAH,KAAKI,YAAYC,IAAI,QAAQC,WAChCN,KAAKI,YAAYG,QAEZT,EAAKI,OAAOL,GAAKW,KAAKC,EAAAA,SAAS,WACpCV,EAAKI,mBACyB,IAA1BJ,EAAKI,kBACPJ,EAAKK,YAAYM,gBAKfhB,EAAVC,UAAAM,SAAU,SAASJ,GACf,IAAMc,EAAMd,EAAIc,IAAIC,cAEpB,QADcZ,KAAKa,QAAQC,WAAWC,KAAK,SAACC,GAAM,OAAAL,EAAIM,WAAWD,SA1BnE,SAAFtB,EACYU,EAC4BS,GAD5Bb,KAAZI,YAAYA,EAC4BJ,KAAxCa,QAAwCA,EAJxCb,KAAAG,iBAA6B,gBAH7B,CAAAe,KAACC,EAAAA,gDAFD,CAAAD,KAASE,EAAAA,YAST,CAAAF,KAAAG,UAAAC,WAAA,CAAA,CAAAJ,KAAKK,EAAAA,UAAL,CAAAL,KAAiBM,EAAAA,OAAjBC,KAAA,CAAwBjC,QCfxB,IAAAkC,EAAA,SAAAA,oBAIA,CAAAR,KAACS,EAAAA,SAADF,KAAA,CAAU,CACRG,UAAW,CACT,CAAEC,QAASC,EAAAA,kBAAmBC,SAAUrC,EAAuBsC,OAAO"
}
