{
  "version": 3,
  "file": "ngx-progressbar-core.umd.js",
  "sources": [
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.module.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.component.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.service.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.token.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress-ref.ts"
  ],
  "sourcesContent": [
    "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgProgressComponent } from './ng-progress.component';\nimport { NgProgress } from './ng-progress.service';\nimport { NgProgressConfig } from './ng-progress.interface';\nimport { CONFIG } from './ng-progress.token';\n\nexport function NgProgressFactory(config: NgProgressConfig) {\n  return new NgProgress(config);\n}\n\n@NgModule({\n  declarations: [NgProgressComponent],\n  exports: [NgProgressComponent],\n  imports: [CommonModule]\n})\nexport class NgProgressModule {\n  static forRoot(config?: NgProgressConfig): ModuleWithProviders {\n    return {\n      ngModule: NgProgressModule,\n      providers: [\n        {provide: CONFIG, useValue: config},\n        {\n          provide: NgProgress,\n          useFactory: NgProgressFactory,\n          deps: [CONFIG]\n        }\n      ]\n    };\n  }\n}\n",
    "/**\n * @license\n * Copyright ngx-progressbar All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/MurhafSousli/ngx-progressbar/blob/master/LICENSE\n */\n\nimport {\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  ViewEncapsulation\n} from '@angular/core';\nimport { NgProgress } from './ng-progress.service';\nimport { NgProgressRef } from './ng-progress-ref';\nimport { NgProgressState } from './ng-progress.interface';\nimport { Observable, Subscription} from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'ng-progress',\n  host: {\n    'role': 'progressbar',\n    '[attr.spinnerPosition]': 'spinnerPosition',\n    '[attr.dir]': 'direction',\n    '[attr.thick]': 'thick'\n  },\n  template: `\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n            [class.-active]=\"state.active\"\n            [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n                [style.transform]=\"state.transform\"\n                [style.backgroundColor]=\"color\"\n                [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n                [style.borderTopColor]=\"color\"\n                [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  styles: [`ng-progress{z-index:999999;pointer-events:none;position:relative}.ng-progress-bar{z-index:999999;top:0;left:0;width:100%;position:fixed;zoom:1;opacity:0}.ng-progress-bar.-active{opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;-webkit-transform:translate(-100%,0,0);transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{display:block;position:fixed;z-index:1031;top:15px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:.4s linear infinite spinner-animation;animation:.4s linear infinite spinner-animation;border:2px solid transparent;border-radius:50%}[dir='ltr+'] .ng-meteor,[dir=ltr-] .ng-meteor{-webkit-transform:rotate(3deg);transform:rotate(3deg)}[dir='ltr+'][thick=true] .ng-meteor,[dir=ltr-][thick=true] .ng-meteor{-webkit-transform:rotate(4deg);transform:rotate(4deg)}[dir='ltr+'] .ng-bar,[dir='rtl+'] .ng-bar{margin-left:-100%}[dir='ltr+'] .ng-meteor,[dir='rtl+'] .ng-meteor{right:0}[dir='ltr+'] .ng-meteor,[dir=rtl-] .ng-meteor{top:-3px}[dir='ltr+'][thick=true] .ng-meteor,[dir=rtl-][thick=true] .ng-meteor{top:-4px}[dir='rtl+'] .ng-meteor,[dir=ltr-] .ng-meteor{bottom:-3px}[dir='rtl+'][thick=true] .ng-meteor,[dir=ltr-][thick=true] .ng-meteor{bottom:-4px}[dir='rtl+'] .ng-bar-placeholder,[dir=ltr-] .ng-bar-placeholder{-webkit-transform:rotate(180deg);transform:rotate(180deg)}[dir='rtl+'] .ng-spinner-icon,[dir=ltr-] .ng-spinner-icon{animation-direction:reverse}[dir='rtl+'] .ng-meteor,[dir=rtl-] .ng-meteor{-webkit-transform:rotate(-3deg);transform:rotate(-3deg)}[dir='rtl+'][thick=true] .ng-meteor,[dir=rtl-][thick=true] .ng-meteor{-webkit-transform:rotate(-4deg);transform:rotate(-4deg)}[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}[thick=true] .ng-bar-placeholder{height:3px}[spinnerPosition=left] .ng-spinner{left:15px;right:unset}[spinnerPosition=right] .ng-spinner{right:15px}@-webkit-keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}`],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\n\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\n\n  private _started$: Subscription;\n  private _completed$: Subscription;\n\n  /** Progress bar worker */\n  progressRef: NgProgressRef;\n\n  /** Progress state stream */\n  state$: Observable<{ active: boolean, transform: string }>;\n\n  /** Creates a new instance if id is not already exists */\n  @Input() id = 'root';\n\n  /** Initializes inputs from the global config */\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\n  @Input() ease: string = this._ngProgress.config.ease;\n  @Input() color: string = this._ngProgress.config.color;\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\n  @Input() thick: boolean = this._ngProgress.config.thick;\n  @Input() max: number = this._ngProgress.config.max;\n  @Input() min: number = this._ngProgress.config.min;\n  @Input() speed: number = this._ngProgress.config.speed;\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\n  @Input() trickleFunc: (n: number) => number = this._ngProgress.config.trickleFunc;\n  @Input() debounceTime: number = this._ngProgress.config.debounceTime;\n  @Output() started = new EventEmitter();\n  @Output() completed = new EventEmitter();\n\n  constructor(private _ngProgress: NgProgress) {\n  }\n\n  ngOnChanges() {\n    if (this.progressRef instanceof NgProgressRef) {\n      // Update progress bar config when inputs change\n      this.progressRef.setConfig({\n        max: (this.max > 0 && this.max <= 100) ? this.max : 100,\n        min: (this.min < 100 && this.min >= 0) ? this.min : 0,\n        speed: this.speed,\n        trickleSpeed: this.trickleSpeed,\n        trickleFunc: this.trickleFunc,\n        debounceTime: this.debounceTime\n      });\n    }\n  }\n\n  ngOnInit() {\n    // Get progress bar service instance\n    this.progressRef = this._ngProgress.ref(this.id, {\n      max: this.max,\n      min: this.min,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      debounceTime: this.debounceTime\n    });\n    this.state$ = this.progressRef.state$.pipe(map((state: NgProgressState) => ({\n      active: state.active,\n      transform: `translate3d(${state.value}%,0,0)`\n    })));\n    /** Subscribes to started and completed events when user used them */\n    if (this.started.observers.length) {\n      this._started$ = this.progressRef.started.subscribe(() => this.started.emit());\n    }\n    if (this.completed.observers.length) {\n      this._completed$ = this.progressRef.completed.subscribe(() => this.completed.emit());\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._started$) {\n      this._started$.unsubscribe();\n    }\n    if (this._completed$) {\n      this._completed$.unsubscribe();\n    }\n    this._ngProgress.destroy(this.id);\n  }\n\n  start() {\n    this.progressRef.start();\n  }\n\n  complete() {\n    this.progressRef.complete();\n  }\n\n  inc(n?: number) {\n    this.progressRef.inc(n);\n  }\n\n  set(n: number) {\n    this.progressRef.set(n);\n  }\n\n  get isStarted() {\n    return this.progressRef.isStarted;\n  }\n}\n",
    "import { Injectable, Inject, Optional } from '@angular/core';\nimport { NgProgressRef } from './ng-progress-ref';\nimport { NgProgressConfig } from './ng-progress.interface';\nimport { EMPTY } from 'rxjs';\nimport { CONFIG } from './ng-progress.token';\n\nconst defaultConfig: NgProgressConfig = {\n  meteor: true,\n  spinner: true,\n  thick: false,\n  ease: 'linear',\n  spinnerPosition: 'right',\n  direction: 'ltr+',\n  color: '#1B95E0',\n  max: 100,\n  min: 8,\n  speed: 200,\n  trickleSpeed: 300,\n  debounceTime: 0,\n  trickleFunc: (n: number): number => {\n    if (n >= 0 && n < 20) return 10;\n    if (n >= 20 && n < 50) return 4;\n    if (n >= 50 && n < 80) return 2;\n    if (n >= 80 && n < 99) return 0.5;\n    return 0;\n  }\n};\n\n@Injectable()\nexport class NgProgress {\n\n  /** Stores NgProgressRef instances */\n  private readonly _instances = {};\n\n  /** Global config */\n  config: NgProgressConfig;\n\n  constructor(@Optional() @Inject(CONFIG) config: NgProgressConfig) {\n    this.config = {...defaultConfig, ...config};\n  }\n\n  /**\n   * Returns NgProgressRef by ID\n   */\n  ref(id = 'root', config?: NgProgressConfig) {\n    if (this._instances[id] instanceof NgProgressRef) {\n      return this._instances[id];\n    } else {\n      config = {...this.config, ...config};\n      return this._instances[id] = new NgProgressRef(config);\n    }\n  }\n\n  setConfig(config: NgProgressConfig, id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].setConfig(config);\n    }\n  }\n\n  start(id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].start();\n    }\n  }\n\n  set(n: number, id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].set(n);\n    }\n  }\n\n  inc(n?: number, id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].inc(n);\n    }\n  }\n\n  complete(id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].complete();\n    }\n  }\n\n  isStarted(id = 'root') {\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].isStarted : false;\n  }\n\n  started(id = 'root') {\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].started : EMPTY;\n  }\n\n  completed(id = 'root') {\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].completed : EMPTY;\n  }\n\n  destroy(id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].destroy();\n      this._instances[id] = null;\n    }\n  }\n\n  destroyAll() {\n    Object.keys(this._instances).map((key) => {\n      this._instances[key].destroy();\n      this._instances[key] = null;\n    });\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\nimport { NgProgressConfig } from './ng-progress.interface';\n\nexport const CONFIG = new InjectionToken<NgProgressConfig>('config');\n",
    "import { NgProgressState, NgProgressConfig } from './ng-progress.interface';\nimport { Observable, Subject, BehaviorSubject, timer, of, combineLatest } from 'rxjs';\nimport { tap, map, skip, delay, filter, debounce, switchMap, distinctUntilChanged } from 'rxjs/operators';\n\nexport class NgProgressRef {\n\n  private _state: NgProgressState = {active: false, value: 0};\n  private _config: NgProgressConfig;\n\n  /** Stream that increments and updates progress state */\n  private _trickling$ = new Subject();\n\n  /** Stream that emits when progress state is changed */\n  state$ = new BehaviorSubject<NgProgressState>(this._state);\n\n  /** Stream that emits when config is changed */\n  config$ = new Subject<NgProgressConfig>();\n\n  get isStarted(): boolean {\n    return this._state.active;\n  }\n\n  /** Progress start event */\n  get started(): Observable<boolean> {\n    return this.state$.pipe(\n      map((state: NgProgressState) => state.active),\n      distinctUntilChanged(),\n      filter(active => active)\n    );\n  }\n\n  /** Progress ended event */\n  get completed(): Observable<boolean> {\n    return this.state$.pipe(\n      map((state: NgProgressState) => state.active),\n      distinctUntilChanged(),\n      filter(active => !active),\n      skip(1)\n    );\n  }\n\n  constructor(customConfig: NgProgressConfig) {\n\n    combineLatest(this._trickling$, this.config$).pipe(\n      debounce(([start, config]: [boolean, NgProgressConfig]) => timer(start ? this._config.debounceTime : 0)),\n      switchMap(([start, config]: [boolean, NgProgressConfig]) => start ? this._trickling(config) : this._complete(config))\n    ).subscribe();\n\n    this.setConfig(customConfig);\n  }\n\n  start() {\n    this._trickling$.next(true);\n  }\n\n  complete() {\n    this._trickling$.next(false);\n  }\n\n  inc(amount?: number) {\n    const n = this._state.value;\n    if (!this.isStarted) {\n      this.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = this._config.trickleFunc(n);\n      }\n      this.set(n + amount);\n    }\n  }\n\n  set(n: number) {\n    this._setState({value: this._clamp(n), active: true});\n  }\n\n  setConfig(config: NgProgressConfig) {\n    this._config = {...this._config, ...config};\n    this.config$.next(this._config);\n  }\n\n  /**\n   * Meant to be used internally and not by user directly\n   * Users should use NgProgressManager.destroy(id) instead\n   */\n  destroy() {\n    this._trickling$.complete();\n    this.state$.complete();\n    this.config$.complete();\n  }\n\n  private _setState(state: NgProgressState) {\n    this._state = {...this._state, ...state};\n    this.state$.next(this._state);\n  }\n\n  /** Clamps a value to be between min and max */\n  private _clamp(n): number {\n    return Math.max(this._config.min, Math.min(this._config.max, n));\n  }\n\n  /** Keeps incrementing the progress */\n  private _trickling(config: NgProgressConfig) {\n    if (!this.isStarted) {\n      this.set(this._config.min);\n    }\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\n  }\n\n  /** Completes then resets the progress */\n  private _complete(config: NgProgressConfig) {\n    return !this.isStarted ? of({}) : of({}).pipe(\n      // Completes the progress\n      tap(() => this._setState({value: 100})),\n\n      // Hides the progress bar after a tiny delay\n      delay(config.speed * 1.7),\n      tap(() => this._setState({active: false})),\n\n      // Resets the progress state\n      delay(config.speed),\n      tap(() => this._setState({value: 0}))\n    );\n  }\n}\n"
  ],
  "names": [
    "NgModule",
    "Output",
    "Input",
    "Component",
    "map",
    "EventEmitter",
    "EMPTY",
    "InjectionToken",
    "distinctUntilChanged",
    "filter",
    "tslib_1.__read",
    "combineLatest",
    "debounce",
    "Subject"
  ],
  "mappings": ";;;;;;;;;;QIMA,uBAAA,YAAoD;;;;;;;;;;;;;;YA0ChD,IAAI,CAAC,OAAT,GAAmB,IAAnBa,YAAA,EAAgC,CAAC;YACjCF,kBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,IAAA,CAAA,OAAA,CAAA,CAAA,IAAA,CAAAC,kBAAA,CAAA,UAAA,EAAA;;;;gBA/BA,IAAA,EAAA,GAAAF,YAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,GAAA,EAAA,CAAA,CAAA,CAAA,CAAA;gBACA,OAAe,KAAf,GAAuB,KAAvB,CAA6B,UAA7B,CAAA,MAAA,CAAA,GAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA;aACA,CAAA,CAAA,CAAA,SAAA,EAAA,CAAA;;;;;;;YASA,GAAA,EAAA;;;;;SAGA,CAAA,CAAA;QACA,MAAA,CAAA,cAAA,CAAsB,aAAtB,CAAA,SAAA,EAAA,SACmD,EAC7C;;;;;YAgBN,GAAA,EAAA;gBACQ,OAAR,IAAA,CAAoB,MAAM,CAA1B,IAA+B,CAACN,aAAhC,CAAA,UAAA,KAAA,IAAA,OAAA,KAAA,CAAA,MAAA,CAAA,EAAA,CAAA,EAAAI,8BAAA,EAAA,EAAAC,gBAAA,CAAA,UAAA,MAAA,IAAA,OAAA,MAAA,CAAA,EAAA,CAAA,CAAA,CAAA;aACA;;;;QAEE,MAAF,CAAA,cAAA,CAAA,aAAA,CAAA,SAAA,EAAA,WAAA,EAAA;;;;;;;aAIA;YACI,UAAJ,EAAA,IAAA;YACI,YAAJ,EAAA,IAAA;SACA,CAAA,CAAA;;;;QAGA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA;YACA,IAAA,CAAO,WAAP,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;SACA,CAAA;;;;;;;;;;;;;;gBAQA,IAAA,CAAA,KAAA,EAAA,CAAA;aACA;iBACS;gBACT,IAAA,OAAA,MAAA,KAAA,QAAA,EAAA;;;;;;;;;;QAUA,aAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAA,CAAA;;;;;;;QAIA,aAAA,CAAA,SAAA,CAAA,SAAiC,GAAjC,UAAA,MAAA;;;;;;;;;;;;;;;;;;QAYA,aAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,KAAA;YACI,IAAJ,CAAA,MAAA,GAAkB,MAAlB,CAAA,MAAA,CAAA,EAAA,EAAA,IAAwC,CAAC,MAAzC,EAAiD,KAAjD,CAAuD,CAAC;;;;;;;;QAKxD,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAA2C,CAAC;;SAE5C,CAAA;;;;;;QAWA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAA,UAAA,MAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AD3HA,QAGA,iBAAA,MAAA,GAAA,IAAAF,mBAAA,CAAA,QAAA,CAAA,CAHA;;;;;IDAA,IAmBA,EAAA,GAAA,UAAA,CAAA;QACI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YAAE,OAAO,EAAE,CAAC;QAChC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;YAAE,OAAO,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;YAAE,OAAO,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;YAAE,OAAO,GAAG,CAAC;QAClC,OAAO,CAAC,CAAC;IACb,CAAG,CAAH;IAnBA,qBAAA,aAAA,GAAA;QACE,MAAM,EAAE,IAAI;QACZ,OAAO,EAAE,IAAI;QACb,KAAK,EAAE,KAAK;QACZ,IAAI,EAAE,QAAQ;QACd,eAAe,EAAE,OAAO;QACxB,SAAS,EAAE,MAAM;QACjB,KAAK,EAAE,SAAS;QAChB,GAAG,EAAE,GAAG;QACR,GAAG,EAAE,CAAC;QACN,KAAK,EAAE,GAAG;QACV,YAAY,EAAE,GAAG;QACjB,YAAY,EAAE,CAAC;QACf,WAAW,EAAb,EAMG;KACF,CAAC;AAGF,QAAA,UAAA,IAAA;;;;QAQE,oBAAF,MAAA;;;;YALA,IAAA,CAAA,UAAA,GAAgC,EAAE,CAAlC;YAMI,IAAI,CAAC,MAAM,GAAf,MAAA,CAAA,MAAA,CAAA,EAAA,EAAsB,aAAa,EAAK,MAAM,CAAC,CAAC;SAC7C;;;;;;;QAKD,UAAF,CAAA,SAAA,CAAA,GAAA,GAAA,UAAA,EAAA,EAAA,MAAA;YACI,IAAI,EAAR,KAAA,KAAA,CAAA,EAAuB;gBAAvB,EAA2B,GAA3B,MAAA,CAAA;aAAuC;YACvC,IAAM,IAAN,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,aAAA,EAAA;gBACA,OAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA;aAAA;iBACA;gBACM,MAAM,GAAZ,MAAA,CAAA,MAA4B,CAAC,EAAE,EAA/B,IAAA,CAAA,MAAA,EAAA,MAAoD,CAAC,CAArD;gBACA,OAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,GAAA,IAAA,aAAA,CAAA,MAAA,CAAA,CAAA;aACA;;;;;;;QAGA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,MAAA,EAAA,EAAqD;YACrD,IAAM,EAAN,KAAA,KAAA,CAAA,EAAqB;gBAArB,EAAyB,GAAzB,MAAA,CAAmC;aAAnC;YACA,IAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,aAAA,EAAA;gBACA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA;;;;;;;QAIA,UAAA,CAAA,SAAA,CAAA,KAAwB,GAAxB,UAAA,EAAA;YACA,IAAA,EAAA,KAAA,KAAA,CAAA,EAAA;gBAAA,EAAA,GAAA,MAAA,CAAA;aAAA;YACA,IAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,aAAA,EAAA;;;;;;;;;QAKA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAA,CAAA,EAAA,EAAA;YACA,IAAA,EAAA,KAAA,KAAA,CAAA,EAAA;gBAAA,EAAA,GAAA,MAAA,CAAA;aAAA;;;;;;;;;;QAMA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAA,CAAA,EAAA,EAAA;;;;;;;SAEA,CAAA;;;;;;;;;;;aAMA;SACA,CAAA;;;;;;YAGA,IAAU,EAAE,KAAZ,KAAA,CAAA,EAAA;gBAAA,EAAA,GAAA,MAAA,CAAA;aAAA;YACI,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,aAAa,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,SAAS,GAAzF,KAAA,CAAA;SACG,CAAH;;;;;QAEE,UAAU,CAAZ,SAAA,CAAuB,OAAvB,GAAA,UAAA,EAAA;YACI,IAAJ,EAAU,KAAV,KAAA,CAAA,EAAA;gBAAA,EAA2B,GAAG,MAA9B,CAAA;aAAA;YACA,OAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,YAAA,aAAA,IAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,OAAA,GAAAD,UAAA,CAAA;;;;;;QAGA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,EAAA;YACA,IAAM,EAAN,KAAA,KAAA,CAAA,EAAqB;gBAArB,EAAyB,GAAzB,MAAA,CAAmC;aAAnC;YACA,OAAA,CAAU,IAAV,CAAA,UAAyB,CAAzB,EAA4B,CAA5B,YAAA,aAAA,IAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,SAAA,GAAAA,UAAA,CAAA;SACA,CAAA;;;;;QAGE,UAAU,CAAZ,SAAA,CAAA,OAAA,GAAA,UAAA,EAAA;YACI,IAAJ,EAAU,KAAK,KAAK,CAAC,EAArB;gBAAA,EAAA,GAAA,MAAoC,CAAC;aAArC;YACA,IAAM,IAAI,CAAC,UAAU,CAAC,EAAtB,CAAyB,YAAY,aAArC,EAAA;gBACM,IAAI,CAAC,UAAU,CAAC,EAAtB,CAAyB,CAAC,OAAO,EAAjC,CAAA;gBACA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA;aACA;;;;;;;YAtEA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,UAAA,CAAA,CAAA,GAAA,CAAA,UAAA,GAAA;;;;;;;;;;;;;;;;;;;;QDuBA,mBAAA,IAAA;;;;QA+BE,6BAAF,WAAA;YAAsB,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAY;;;;YAnB7C,IAAA,CAAA,EAAA,GAAgB,MAAM,CAAtB;;;;YAGA,IAAA,CAAA,eAAA,GAA+C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,eAAe,CAAtF;YACA,IAAA,CAAA,SAAA,GAA0D,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAA3F;YACA,IAAA,CAAA,IAAA,GAA0B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAtD;YACA,IAAA,CAAA,KAAA,GAA2B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAxD;YACA,IAAA,CAAA,MAAA,GAA6B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAA3D;YACA,IAAA,CAAA,OAAA,GAA8B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAA7D;YACA,IAAA,CAAA,KAAA,GAA4B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAzD;YACA,IAAA,CAAA,GAAA,GAAyB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAApD;YACA,IAAA,CAAA,GAAA,GAAyB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAApD;YACA,IAAA,CAAA,KAAA,GAA2B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAxD;YACA,IAAA,CAAA,YAAA,GAAkC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAtE;YACA,IAAA,CAAA,WAAA,GAAgD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAnF;YACA,IAAA,CAAA,YAAA,GAAkC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAtE;YACA,IAAA,CAAA,OAAA,GAAsB,IAAID,iBAAY,EAAE,CAAxC;YACA,IAAA,CAAA,SAAA,GAAwB,IAAIA,iBAAY,EAAE,CAA1C;SAGG;;;;QAED,mBAAF,CAAA,SAAA,CAAA,WAAA,GAAA;YACI,IAAI,IAAI,CAAC,WAAW,YAAY,aAAa,EAAE;;gBAE7C,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;oBACzB,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC,GAAG,GAAG,GAAG;oBACvD,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,GAAG,GAAG,CAAC;oBACrD,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,YAAY,EAAE,IAAI,CAAC,YAAY;iBAChC,CAAC,CAAC;aACJ;SACF,CAAH;;;;QAEE,mBAAF,CAAA,SAAA,CAAA,QAAA,GAAA;;;YAGA,IAAM,CAAN,WAAA,GAAA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,EAAA;gBACM,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,GAAN,EAAW,IAAX,CAAA,GAAA;gBACM,KAAN,EAAA,IAAA,CAAkB,KAAlB;gBACM,YAAY,EAAE,IAAI,CAAC,YAAY;gBACrC,YAAA,EAAA,IAAA,CAAA,YAAA;aACA,CAAA,CAAA;YACA,IAAM,CAAN,MAAA,GAAA,IAAoB,CAApB,WAAA,CAAA,MAAA,CAAA,IAAA,CAAAD,aAAA,CAAA,UAAA,KAAA;gBAAA,QAAA;oBACM,MAAN,EAAA,KAAA,CAAA,MAAA;oBACQ,SAAR,EAAA,cAAA,GAAA,KAAA,CAAA,KAAA,GAAA,QAAA;;;;YAGA,IAAM,IAAI,CAAC,OAAX,CAAA,SAA4B,CAA5B,MAAA,EAAA;gBACA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA,SAAA,CAAA,cAAA,OAAA,KAAA,CAAA,OAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA;aACA;YACA,IAAM,IAAI,CAAC,SAAX,CAAA,SAA8B,CAA9B,MAAA,EAAA;gBACA,IAAA,CAAA,WAAA,GAAA,IAAA,CAAA,WAAA,CAAA,SAAA,CAAA,SAAA,CAAA,cAAA,OAAA,KAAA,CAAA,SAAA,CAAA,IAAA,EAAA,CAAA,EAAA,CAAA,CAAA;aACA;;;;;QAGA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA;YACA,IAAM,IAAI,CAAC,SAAS,EAApB;gBACA,IAAA,CAAA,SAAA,CAAA,WAAA,EAAA,CAAA;aACA;YACA,IAAM,IAAI,CAAC,WAAW,EAAtB;gBACA,IAAA,CAAA,WAAA,CAAA,WAAA,EAAA,CAAA;aACA;YACA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;;;;;QAGA,mBAAA,CAAoB,SAAS,CAA7B,KAAA,GAAA;YACA,IAAA,CAAA,WAAA,CAAA,KAAA,EAAA,CAAA;;;;;QAGA,mBAAA,CAAoB,SAAS,CAA7B,QAAA,GAAA;YACA,IAAA,CAAA,WAAA,CAAA,QAAA,EAAA,CAAA;;;;;;QAGA,mBAAA,CAAoB,SAApB,CAAA,GAAA,GAAA,UAAA,CAAA;YACA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;;;QAGA,mBAAA,CAAoB,SAApB,CAAA,GAAA,GAAA,UAAA,CAAA;YACA,IAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;;;;;;YAIA,GAAA,EAAA;;;YArIA,UAAA,EAAA,IAAA;YACA,YAAA,EAAA,IAAY;SACZ,CAAA,CAAA;QACA,OAAA,mBAAA,CAAA;IACA,CAAA,EAAA,CAAA,CAAA;IACA,mBACA,CAAI,UAAJ,GAAA;QACA,EAAA,IAAA,EAAAD,cAAA,EAAA,IAAA,EAAA,CAAA;oBACE,QAAQ,EAAE,aAAZ;;;;;;;;;;;;;;;;;;;;;;QAoBA,iBAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,UAAA,EAAA,EAAA;QACA,WAAA,EAAA,CAAA,EAAA,IAAU,EAAVA,UAAA,EAAA,EAAA;QACA,MAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;QACA,OAAA,EAAA,CAAA,EAAE,IAAF,EAAAA,UAAA,EAAA,EAAiB;QACjB,QAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;QACA,SAAC,EAAD,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;;;;QAvCA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAmBA,UAAnB,EAAA,EAAA;;;QAqDA,cAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;QAGA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,WAAA,EAAG,EAAH;QACA,WAAA,EAAA,CAAA,EAAA,IAAA,EAAGA,WAAH,EAAA,EAAA;KACA,CAAA;;;;;ID7EA;;;;IAOA,2BAAkC,MAAwB;QACxD,OAAO,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;AAOD,QAAA,gBAAA,IAAA;;;;;;;QAGA,gBAAc,CAAd,OAAA,GAAA,UAAA,MAAA;YACA,OAAA;gBACA,QAAA,EAAA,gBAAA;gBACA,SAAA,EAAA;oBACA,EAAA,OAAA,EAAiB,MAAjB,EAAA,QAAA,EAAA,MAAA,EAAA;oBACA;wBACU,OAAO,EAAjB,UAAA;wBACA,UAAA,EAAA,iBAAA;wBACA,IAAA,EAAA,CAAA,MAAA,CAAA;qBACA;iBACA;;;QAlBA,OAAA,gBAAA,CAAA;IACA,CAAA,EAAA,CAAA,CAAA;IACA,gBACE,CAAF,UAAA,GAAA;QACA,EAAA,IAAA,EAAAD,aAAA,EAAA,IAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;"
}
