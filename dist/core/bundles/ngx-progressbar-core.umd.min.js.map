{
  "version": 3,
  "file": "ngx-progressbar-core.umd.min.js",
  "sources": [
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress-ref.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.token.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.service.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.component.ts",
    "ng://@ngx-progressbar/core/projects/core/src/lib/ng-progress.module.ts"
  ],
  "sourcesContent": [
    "import { NgProgressState, NgProgressConfig } from './ng-progress.interface';\nimport { Observable, Subject, BehaviorSubject, timer, of, combineLatest } from 'rxjs';\nimport { tap, map, skip, delay, filter, debounce, switchMap, distinctUntilChanged } from 'rxjs/operators';\n\nexport class NgProgressRef {\n\n  private _state: NgProgressState = {active: false, value: 0};\n  private _config: NgProgressConfig;\n\n  /** Stream that increments and updates progress state */\n  private _trickling$ = new Subject();\n\n  /** Stream that emits when progress state is changed */\n  state$ = new BehaviorSubject<NgProgressState>(this._state);\n\n  /** Stream that emits when config is changed */\n  config$ = new Subject<NgProgressConfig>();\n\n  get isStarted(): boolean {\n    return this._state.active;\n  }\n\n  /** Progress start event */\n  get started(): Observable<boolean> {\n    return this.state$.pipe(\n      map((state: NgProgressState) => state.active),\n      distinctUntilChanged(),\n      filter(active => active)\n    );\n  }\n\n  /** Progress ended event */\n  get completed(): Observable<boolean> {\n    return this.state$.pipe(\n      map((state: NgProgressState) => state.active),\n      distinctUntilChanged(),\n      filter(active => !active),\n      skip(1)\n    );\n  }\n\n  constructor(customConfig: NgProgressConfig) {\n\n    combineLatest(this._trickling$, this.config$).pipe(\n      debounce(([start, config]: [boolean, NgProgressConfig]) => timer(start ? this._config.debounceTime : 0)),\n      switchMap(([start, config]: [boolean, NgProgressConfig]) => start ? this._trickling(config) : this._complete(config))\n    ).subscribe();\n\n    this.setConfig(customConfig);\n  }\n\n  start() {\n    this._trickling$.next(true);\n  }\n\n  complete() {\n    this._trickling$.next(false);\n  }\n\n  inc(amount?: number) {\n    const n = this._state.value;\n    if (!this.isStarted) {\n      this.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = this._config.trickleFunc(n);\n      }\n      this.set(n + amount);\n    }\n  }\n\n  set(n: number) {\n    this._setState({value: this._clamp(n), active: true});\n  }\n\n  setConfig(config: NgProgressConfig) {\n    this._config = {...this._config, ...config};\n    this.config$.next(this._config);\n  }\n\n  /**\n   * Meant to be used internally and not by user directly\n   * Users should use NgProgressManager.destroy(id) instead\n   */\n  destroy() {\n    this._trickling$.complete();\n    this.state$.complete();\n    this.config$.complete();\n  }\n\n  private _setState(state: NgProgressState) {\n    this._state = {...this._state, ...state};\n    this.state$.next(this._state);\n  }\n\n  /** Clamps a value to be between min and max */\n  private _clamp(n): number {\n    return Math.max(this._config.min, Math.min(this._config.max, n));\n  }\n\n  /** Keeps incrementing the progress */\n  private _trickling(config: NgProgressConfig) {\n    if (!this.isStarted) {\n      this.set(this._config.min);\n    }\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\n  }\n\n  /** Completes then resets the progress */\n  private _complete(config: NgProgressConfig) {\n    return !this.isStarted ? of({}) : of({}).pipe(\n      // Completes the progress\n      tap(() => this._setState({value: 100})),\n\n      // Hides the progress bar after a tiny delay\n      delay(config.speed * 1.7),\n      tap(() => this._setState({active: false})),\n\n      // Resets the progress state\n      delay(config.speed),\n      tap(() => this._setState({value: 0}))\n    );\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\nimport { NgProgressConfig } from './ng-progress.interface';\n\nexport const CONFIG = new InjectionToken<NgProgressConfig>('config');\n",
    "import { Injectable, Inject, Optional } from '@angular/core';\nimport { NgProgressRef } from './ng-progress-ref';\nimport { NgProgressConfig } from './ng-progress.interface';\nimport { EMPTY } from 'rxjs';\nimport { CONFIG } from './ng-progress.token';\n\nconst defaultConfig: NgProgressConfig = {\n  meteor: true,\n  spinner: true,\n  thick: false,\n  ease: 'linear',\n  spinnerPosition: 'right',\n  direction: 'ltr+',\n  color: '#1B95E0',\n  max: 100,\n  min: 8,\n  speed: 200,\n  trickleSpeed: 300,\n  debounceTime: 0,\n  trickleFunc: (n: number): number => {\n    if (n >= 0 && n < 20) return 10;\n    if (n >= 20 && n < 50) return 4;\n    if (n >= 50 && n < 80) return 2;\n    if (n >= 80 && n < 99) return 0.5;\n    return 0;\n  }\n};\n\n@Injectable()\nexport class NgProgress {\n\n  /** Stores NgProgressRef instances */\n  private readonly _instances = {};\n\n  /** Global config */\n  config: NgProgressConfig;\n\n  constructor(@Optional() @Inject(CONFIG) config: NgProgressConfig) {\n    this.config = {...defaultConfig, ...config};\n  }\n\n  /**\n   * Returns NgProgressRef by ID\n   */\n  ref(id = 'root', config?: NgProgressConfig) {\n    if (this._instances[id] instanceof NgProgressRef) {\n      return this._instances[id];\n    } else {\n      config = {...this.config, ...config};\n      return this._instances[id] = new NgProgressRef(config);\n    }\n  }\n\n  setConfig(config: NgProgressConfig, id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].setConfig(config);\n    }\n  }\n\n  start(id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].start();\n    }\n  }\n\n  set(n: number, id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].set(n);\n    }\n  }\n\n  inc(n?: number, id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].inc(n);\n    }\n  }\n\n  complete(id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].complete();\n    }\n  }\n\n  isStarted(id = 'root') {\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].isStarted : false;\n  }\n\n  started(id = 'root') {\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].started : EMPTY;\n  }\n\n  completed(id = 'root') {\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].completed : EMPTY;\n  }\n\n  destroy(id = 'root') {\n    if (this._instances[id] instanceof NgProgressRef) {\n      this._instances[id].destroy();\n      this._instances[id] = null;\n    }\n  }\n\n  destroyAll() {\n    Object.keys(this._instances).map((key) => {\n      this._instances[key].destroy();\n      this._instances[key] = null;\n    });\n  }\n}\n",
    "/**\n * @license\n * Copyright ngx-progressbar All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/MurhafSousli/ngx-progressbar/blob/master/LICENSE\n */\n\nimport {\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  ViewEncapsulation\n} from '@angular/core';\nimport { NgProgress } from './ng-progress.service';\nimport { NgProgressRef } from './ng-progress-ref';\nimport { NgProgressState } from './ng-progress.interface';\nimport { Observable, Subscription} from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'ng-progress',\n  host: {\n    'role': 'progressbar',\n    '[attr.spinnerPosition]': 'spinnerPosition',\n    '[attr.dir]': 'direction',\n    '[attr.thick]': 'thick'\n  },\n  template: `\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n            [class.-active]=\"state.active\"\n            [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n                [style.transform]=\"state.transform\"\n                [style.backgroundColor]=\"color\"\n                [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n                [style.borderTopColor]=\"color\"\n                [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  styles: [`ng-progress{z-index:999999;pointer-events:none;position:relative}.ng-progress-bar{z-index:999999;top:0;left:0;width:100%;position:fixed;zoom:1;opacity:0}.ng-progress-bar.-active{opacity:1;transition:none}.ng-bar-placeholder{position:absolute;height:2px;width:100%}.ng-bar{width:100%;height:100%;-webkit-transform:translate(-100%,0,0);transform:translate(-100%,0,0)}.ng-meteor{display:block;position:absolute;width:100px;height:100%;opacity:1}.ng-spinner{display:block;position:fixed;z-index:1031;top:15px}.ng-spinner-icon{width:18px;height:18px;box-sizing:border-box;-webkit-animation:.4s linear infinite spinner-animation;animation:.4s linear infinite spinner-animation;border:2px solid transparent;border-radius:50%}[dir='ltr+'] .ng-meteor,[dir=ltr-] .ng-meteor{-webkit-transform:rotate(3deg);transform:rotate(3deg)}[dir='ltr+'][thick=true] .ng-meteor,[dir=ltr-][thick=true] .ng-meteor{-webkit-transform:rotate(4deg);transform:rotate(4deg)}[dir='ltr+'] .ng-bar,[dir='rtl+'] .ng-bar{margin-left:-100%}[dir='ltr+'] .ng-meteor,[dir='rtl+'] .ng-meteor{right:0}[dir='ltr+'] .ng-meteor,[dir=rtl-] .ng-meteor{top:-3px}[dir='ltr+'][thick=true] .ng-meteor,[dir=rtl-][thick=true] .ng-meteor{top:-4px}[dir='rtl+'] .ng-meteor,[dir=ltr-] .ng-meteor{bottom:-3px}[dir='rtl+'][thick=true] .ng-meteor,[dir=ltr-][thick=true] .ng-meteor{bottom:-4px}[dir='rtl+'] .ng-bar-placeholder,[dir=ltr-] .ng-bar-placeholder{-webkit-transform:rotate(180deg);transform:rotate(180deg)}[dir='rtl+'] .ng-spinner-icon,[dir=ltr-] .ng-spinner-icon{animation-direction:reverse}[dir='rtl+'] .ng-meteor,[dir=rtl-] .ng-meteor{-webkit-transform:rotate(-3deg);transform:rotate(-3deg)}[dir='rtl+'][thick=true] .ng-meteor,[dir=rtl-][thick=true] .ng-meteor{-webkit-transform:rotate(-4deg);transform:rotate(-4deg)}[thick=true] .ng-spinner-icon{width:24px;height:24px;border-width:3px}[thick=true] .ng-bar-placeholder{height:3px}[spinnerPosition=left] .ng-spinner{left:15px;right:unset}[spinnerPosition=right] .ng-spinner{right:15px}@-webkit-keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes spinner-animation{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}`],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false\n})\n\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\n\n  private _started$: Subscription;\n  private _completed$: Subscription;\n\n  /** Progress bar worker */\n  progressRef: NgProgressRef;\n\n  /** Progress state stream */\n  state$: Observable<{ active: boolean, transform: string }>;\n\n  /** Creates a new instance if id is not already exists */\n  @Input() id = 'root';\n\n  /** Initializes inputs from the global config */\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\n  @Input() ease: string = this._ngProgress.config.ease;\n  @Input() color: string = this._ngProgress.config.color;\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\n  @Input() thick: boolean = this._ngProgress.config.thick;\n  @Input() max: number = this._ngProgress.config.max;\n  @Input() min: number = this._ngProgress.config.min;\n  @Input() speed: number = this._ngProgress.config.speed;\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\n  @Input() trickleFunc: (n: number) => number = this._ngProgress.config.trickleFunc;\n  @Input() debounceTime: number = this._ngProgress.config.debounceTime;\n  @Output() started = new EventEmitter();\n  @Output() completed = new EventEmitter();\n\n  constructor(private _ngProgress: NgProgress) {\n  }\n\n  ngOnChanges() {\n    if (this.progressRef instanceof NgProgressRef) {\n      // Update progress bar config when inputs change\n      this.progressRef.setConfig({\n        max: (this.max > 0 && this.max <= 100) ? this.max : 100,\n        min: (this.min < 100 && this.min >= 0) ? this.min : 0,\n        speed: this.speed,\n        trickleSpeed: this.trickleSpeed,\n        trickleFunc: this.trickleFunc,\n        debounceTime: this.debounceTime\n      });\n    }\n  }\n\n  ngOnInit() {\n    // Get progress bar service instance\n    this.progressRef = this._ngProgress.ref(this.id, {\n      max: this.max,\n      min: this.min,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      debounceTime: this.debounceTime\n    });\n    this.state$ = this.progressRef.state$.pipe(map((state: NgProgressState) => ({\n      active: state.active,\n      transform: `translate3d(${state.value}%,0,0)`\n    })));\n    /** Subscribes to started and completed events when user used them */\n    if (this.started.observers.length) {\n      this._started$ = this.progressRef.started.subscribe(() => this.started.emit());\n    }\n    if (this.completed.observers.length) {\n      this._completed$ = this.progressRef.completed.subscribe(() => this.completed.emit());\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._started$) {\n      this._started$.unsubscribe();\n    }\n    if (this._completed$) {\n      this._completed$.unsubscribe();\n    }\n    this._ngProgress.destroy(this.id);\n  }\n\n  start() {\n    this.progressRef.start();\n  }\n\n  complete() {\n    this.progressRef.complete();\n  }\n\n  inc(n?: number) {\n    this.progressRef.inc(n);\n  }\n\n  set(n: number) {\n    this.progressRef.set(n);\n  }\n\n  get isStarted() {\n    return this.progressRef.isStarted;\n  }\n}\n",
    "import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgProgressComponent } from './ng-progress.component';\nimport { NgProgress } from './ng-progress.service';\nimport { NgProgressConfig } from './ng-progress.interface';\nimport { CONFIG } from './ng-progress.token';\n\nexport function NgProgressFactory(config: NgProgressConfig) {\n  return new NgProgress(config);\n}\n\n@NgModule({\n  declarations: [NgProgressComponent],\n  exports: [NgProgressComponent],\n  imports: [CommonModule]\n})\nexport class NgProgressModule {\n  static forRoot(config?: NgProgressConfig): ModuleWithProviders {\n    return {\n      ngModule: NgProgressModule,\n      providers: [\n        {provide: CONFIG, useValue: config},\n        {\n          provide: NgProgress,\n          useFactory: NgProgressFactory,\n          deps: [CONFIG]\n        }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "NgProgressRef",
    "customConfig",
    "this",
    "config$",
    "Subject",
    "combineLatest",
    "_trickling$",
    "pipe",
    "debounce",
    "_a",
    "_b",
    "tslib_1.__read",
    "start",
    "config",
    "_this",
    "_trickling",
    "_complete",
    "subscribe",
    "get",
    "Object",
    "defineProperty",
    "prototype",
    "state$",
    "map",
    "state",
    "active",
    "distinctUntilChanged",
    "filter",
    "enumerable",
    "configurable",
    "next",
    "amount",
    "set",
    "n",
    "setConfig",
    "_setState",
    "_state",
    "assign",
    "_clamp",
    "CONFIG",
    "InjectionToken",
    "defaultConfig",
    "meteor",
    "spinner",
    "thick",
    "ease",
    "spinnerPosition",
    "direction",
    "color",
    "max",
    "min",
    "speed",
    "trickleSpeed",
    "debounceTime",
    "trickleFunc",
    "NgProgress",
    "_instances",
    "ref",
    "id",
    "inc",
    "isStarted",
    "started",
    "EMPTY",
    "completed",
    "destroy",
    "keys",
    "key",
    "NgProgressComponent",
    "_ngProgress",
    "EventEmitter",
    "ngOnChanges",
    "progressRef",
    "ngOnInit",
    "transform",
    "value",
    "observers",
    "length",
    "_started$",
    "emit",
    "_completed$",
    "ngOnDestroy",
    "unsubscribe",
    "complete",
    "NgProgressFactory",
    "decorators",
    "type",
    "Component",
    "args",
    "selector",
    "Input",
    "Output",
    "NgProgressModule",
    "forRoot",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "useFactory",
    "deps",
    "NgModule"
  ],
  "mappings": "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"
}
