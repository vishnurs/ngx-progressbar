{
  "version": 3,
  "file": "ngx-progressbar-http.js",
  "sources": [
    "ng://@ngx-progressbar/http/projects/http/src/lib/ng-progress-http.module.ts",
    "ng://@ngx-progressbar/http/projects/http/src/lib/ng-progress.interceptor.ts",
    "ng://@ngx-progressbar/http/projects/http/src/lib/ng-progress-http.token.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\nimport { CONFIG } from './ng-progress-http.token';\n\nconst defaultConfig: NgProgressHttpConfig = {\n  silentApis: []\n}\n\n@NgModule({\n})\nexport class NgProgressHttpModule {\n  static forRoot(config?: NgProgressHttpConfig): ModuleWithProviders {\n    config = {...defaultConfig, ...config};\n    return {\n      ngModule: NgProgressHttpModule,\n      providers: [\n        { provide: CONFIG, useValue: config },\n        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n      ]\n    };\n  }\n}\n",
    "import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { NgProgress } from '@ngx-progressbar/core';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\nimport { CONFIG } from './ng-progress-http.token';\n\n@Injectable()\nexport class NgProgressInterceptor implements HttpInterceptor {\n\n  private _inProgressCount = 0;\n\n  constructor(private _ngProgress: NgProgress, @Optional() @Inject(CONFIG) private _config?: NgProgressHttpConfig) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Ignore silent api requests\n    if (this.checkUrl(req)) {\n      return next.handle(req);\n    }\n\n    this._inProgressCount++;\n    if (!this._ngProgress.ref('root').isStarted) {\n      this._ngProgress.start();\n    }\n    return next.handle(req).pipe(finalize(() => {\n      this._inProgressCount--;\n      if (this._inProgressCount === 0) {\n        this._ngProgress.complete();\n      }\n    }));\n  }\n\n  /**\n   * Check if request is silent.\n   * @param req request\n   */\n  private checkUrl(req: HttpRequest<any>) {\n    const url = req.url.toLowerCase();\n    const found = this._config.silentApis.find((u) => url.startsWith(u));\n    return !!found;\n  }\n}\n",
    "import { InjectionToken } from '@angular/core';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\n\nexport const CONFIG = new InjectionToken<NgProgressHttpConfig>('config');\n"
  ],
  "names": [],
  "mappings": ";;;;;;;;;AEAA,AAGO,qBAAP,MAAA,GAAA,IAAA,cAAA,CAAA,QAAA,CAAA,CAAuE;;;;;;ADHvE,AASA,IAAA,qBAAA,kBAAA,YAAA;;;;;IAIE,SAAF,qBAAA,CAAA,WAAA,EAAA,OAAA,EAAA;QAAsB,IAAtB,CAAA,WAAiC,GAAX,WAAW,CAAY;QAAsC,IAAnF,CAAA,OAA0F,GAAP,OAAO,CAA1F;QAFA,IAAA,CAAA,gBAAA,GAA6B,CAAC,CAA9B;KAGG;;;;;;IAED,qBAAF,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,GAAA,EAAA,IAAA,EAAA;;;QAGA,IAAM,IAAN,CAAA,QAAA,CAAA,GAAA,CAAwB,EAAxB;YACA,OAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA;SAEA;QACI,IAAI,CAAC,gBAAgB,EAAzB,CAAA;QACA,IAAM,CAAN,IAAW,CAAX,WAAuB,CAAvB,GAAA,CAA4B,MAA5B,CAAA,CAAA,SAAA,EAAA;YACA,IAAA,CAAA,WAAA,CAAA,KAAA,EAAA,CAAA;SACA;QACA,OAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,IAA8B,CAA9B,QAAA,CAAA,YAAA;YACM,KAAN,CAAA,gBAAA,EAAA,CAA+B;YAC/B,IAAQ,KAAK,CAAb,gBAAA,KAAmC,CAAC,EAApC;gBACA,KAAA,CAAA,WAAA,CAAA,QAAA,EAAA,CAAA;aACA;SACA,CAAA,CAAA,CAAA;;;;;;;IAOA,qBAAA,CAAA,SAAA,CAAA,QAAuB,GAAvB,UAAA,GAAA,EAAA;QACI,qBAAJ,GAAA,GAAA,GAAA,CAAkB,GAAlB,CAAsB,WAAtB,EAAA,CAAA;QACI,qBAAJ,KAAA,GAAA,IAAA,CAAA,OAAA,CAAA,UAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA,EAAA,OAAA,GAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;;CAjCA,EAAA,CAAA,CAAA;;;CAJA,CAAA;;;;;;;;;;;ADJA,AAMA,qBAAA,aAAA,GAAA;IACE,UAAU,EAAE,EAAE;CACf,CAAA;AAID,AAAA,IAAA,oBAAA,kBAAA,YAAA;;;;;;;IAGA,oBAAA,CAAA,OAAA,GAAA,UAAA,MAAA,EAAA;QACA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,aAAA,EAAA,MAAA,CAAA,CAAA;QACA,OAAA;YACA,QAAA,EAAA,oBAAA;YACA,SAAA,EAAA;gBACA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA;gBACA,EAAA,OAAA,EAAA,iBAAA,EAAA,QAAA,EAAA,qBAAA,EAAA,KAAA,EAAA,IAAA,EAAA;aACA;;;IAZA,OAAA,oBACC,CADD;;;;;;;;;;;;;;;;;;"
}
