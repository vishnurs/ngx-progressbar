{
  "version": 3,
  "file": "ngx-progressbar-http.umd.min.js",
  "sources": [
    "ng://@ngx-progressbar/http/projects/http/src/lib/ng-progress-http.token.ts",
    "ng://@ngx-progressbar/http/projects/http/src/lib/ng-progress.interceptor.ts",
    "ng://@ngx-progressbar/http/projects/http/src/lib/ng-progress-http.module.ts"
  ],
  "sourcesContent": [
    "import { InjectionToken } from '@angular/core';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\n\nexport const CONFIG = new InjectionToken<NgProgressHttpConfig>('config');\n",
    "import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { NgProgress } from '@ngx-progressbar/core';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\nimport { CONFIG } from './ng-progress-http.token';\n\n@Injectable()\nexport class NgProgressInterceptor implements HttpInterceptor {\n\n  private _inProgressCount = 0;\n\n  constructor(private _ngProgress: NgProgress, @Optional() @Inject(CONFIG) private _config?: NgProgressHttpConfig) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Ignore silent api requests\n    if (this.checkUrl(req)) {\n      return next.handle(req);\n    }\n\n    this._inProgressCount++;\n    if (!this._ngProgress.ref('root').isStarted) {\n      this._ngProgress.start();\n    }\n    return next.handle(req).pipe(finalize(() => {\n      this._inProgressCount--;\n      if (this._inProgressCount === 0) {\n        this._ngProgress.complete();\n      }\n    }));\n  }\n\n  /**\n   * Check if request is silent.\n   * @param req request\n   */\n  private checkUrl(req: HttpRequest<any>) {\n    const url = req.url.toLowerCase();\n    const found = this._config.silentApis.find((u) => url.startsWith(u));\n    return !!found;\n  }\n}\n",
    "import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\nimport { NgProgressHttpConfig } from './ng-progress-http.interface';\nimport { CONFIG } from './ng-progress-http.token';\n\nconst defaultConfig: NgProgressHttpConfig = {\n  silentApis: []\n}\n\n@NgModule({\n})\nexport class NgProgressHttpModule {\n  static forRoot(config?: NgProgressHttpConfig): ModuleWithProviders {\n    config = {...defaultConfig, ...config};\n    return {\n      ngModule: NgProgressHttpModule,\n      providers: [\n        { provide: CONFIG, useValue: config },\n        { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "CONFIG",
    "InjectionToken",
    "NgProgressInterceptor",
    "_ngProgress",
    "_config",
    "this",
    "_inProgressCount",
    "prototype",
    "intercept",
    "req",
    "next",
    "checkUrl",
    "handle",
    "ref",
    "isStarted",
    "start",
    "pipe",
    "finalize",
    "_this",
    "complete",
    "url",
    "toLowerCase",
    "silentApis",
    "find",
    "u",
    "startsWith",
    "defaultConfig",
    "NgProgressHttpModule",
    "forRoot",
    "config",
    "Object",
    "assign",
    "ngModule",
    "providers",
    "provide",
    "useValue",
    "HTTP_INTERCEPTORS",
    "useClass",
    "multi"
  ],
  "mappings": "4hBAAA,IAGAA,EAAA,IAAAC,EAAAA,eAAA,UCMAC,EAAA,WAIE,SAAAA,EAAFC,EAAAC,GAAsBC,KAAtBF,YAAsBA,EAA6DE,KAAnFD,QAAmFA,EAFnFC,KAAAC,iBAA6B,SAK3BJ,EAAFK,UAAAC,UAAA,SAAAC,EAAAC,cAGA,OAAML,KAANM,SAAAF,GACAC,EAAAE,OAAAH,IAGIJ,KAAKC,mBACTD,KAAAF,YAAAU,IAA4B,QAA5BC,WACAT,KAAAF,YAAAY,QAEAL,EAAAE,OAAAH,GAAAO,KAAAC,EAAAA,SAAA,WACMC,EAANZ,mBACmC,IAA3BY,EAARZ,kBACAY,EAAAf,YAAAgB,gBASAjB,EAAAK,UAAAI,SAAA,SAAAF,GACI,IAAJW,EAAAX,EAAkBW,IAAIC,sBACtBhB,KAAAD,QAAAkB,WAAAC,KAAA,SAAAC,GAAA,OAAAJ,EAAAK,WAAAD,QAhCA,wKCTA,IAMAE,EAAA,CACEJ,WAAY,IAKdK,EAAA,yBAFA,OAKAA,EAAAC,QAAA,SAAAC,GAEA,OADAA,EAAAC,OAAAC,OAAA,GAAAL,EAAAG,GACA,CACAG,SAAAL,EACAM,UAAA,CACA,CAAAC,QAAAlC,EAAAmC,SAAAN,GACA,CAAAK,QAAAE,EAAAA,kBAAAC,SAAAnC,EAAAoC,OAAA,MAXAX,EAEA"
}
